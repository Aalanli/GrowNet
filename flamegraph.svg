<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="713"><g><title>perf-exec (6 samples, 0.84%)</title><rect x="0.0000%" y="549" width="0.8415%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="533" width="0.8415%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="517" width="0.8415%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="501" width="0.8415%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="485" width="0.8415%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="469" width="0.8415%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="453" width="0.8415%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="437" width="0.8415%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="421" width="0.8415%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="0.0000%" y="405" width="0.8415%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="533" width="0.1403%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="1.0915%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="517" width="0.1403%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="1.0915%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="501" width="0.1403%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="1.0915%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="485" width="0.1403%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="1.0915%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="469" width="0.1403%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.0915%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="453" width="0.1403%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.0915%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="437" width="0.1403%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="1.0915%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="421" width="0.1403%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="1.0915%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="405" width="0.1403%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="1.0915%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="389" width="0.1403%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="1.0915%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="373" width="0.1403%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="1.0915%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="357" width="0.1403%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="1.0915%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="341" width="0.1403%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="1.0915%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="325" width="0.1403%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="1.0915%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="309" width="0.1403%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="1.0915%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="293" width="0.1403%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="1.0915%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="277" width="0.1403%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="1"/><text x="1.0915%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="261" width="0.1403%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="1"/><text x="1.0915%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.8415%" y="245" width="0.1403%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="1"/><text x="1.0915%" y="255.50"></text></g><g><title>__GI_exit (1 samples, 0.14%)</title><rect x="0.9818%" y="501" width="0.1403%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="1.2318%" y="511.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.14%)</title><rect x="0.9818%" y="485" width="0.1403%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="1"/><text x="1.2318%" y="495.50"></text></g><g><title>OPENSSL_cleanup (1 samples, 0.14%)</title><rect x="0.9818%" y="469" width="0.1403%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="1"/><text x="1.2318%" y="479.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="0.9818%" y="453" width="0.1403%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="1"/><text x="1.2318%" y="463.50"></text></g><g><title>OPENSSL_LH_free (1 samples, 0.14%)</title><rect x="0.9818%" y="437" width="0.1403%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="1.2318%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="421" width="0.1403%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="1.2318%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="405" width="0.1403%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="1.2318%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="389" width="0.1403%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="1.2318%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="373" width="0.1403%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="1.2318%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="357" width="0.1403%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="1.2318%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="341" width="0.1403%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="1.2318%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="325" width="0.1403%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="1"/><text x="1.2318%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="309" width="0.1403%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="1"/><text x="1.2318%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="293" width="0.1403%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="1"/><text x="1.2318%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="0.9818%" y="277" width="0.1403%" height="15" fill="rgb(213,116,39)" fg:x="7" fg:w="1"/><text x="1.2318%" y="287.50"></text></g><g><title>__libc_csu_init (1 samples, 0.14%)</title><rect x="1.1220%" y="501" width="0.1403%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="1.3720%" y="511.50"></text></g><g><title>curl::INIT_CTOR::init_ctor (1 samples, 0.14%)</title><rect x="1.1220%" y="485" width="0.1403%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="1.3720%" y="495.50"></text></g><g><title>curl::init (1 samples, 0.14%)</title><rect x="1.1220%" y="469" width="0.1403%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="1.3720%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once (1 samples, 0.14%)</title><rect x="1.1220%" y="453" width="0.1403%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="1.3720%" y="463.50"></text></g><g><title>std::sys_common::once::futex::Once::call (1 samples, 0.14%)</title><rect x="1.1220%" y="437" width="0.1403%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="1.3720%" y="447.50"></text></g><g><title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.14%)</title><rect x="1.1220%" y="421" width="0.1403%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="1"/><text x="1.3720%" y="431.50"></text></g><g><title>curl::init::{{closure}} (1 samples, 0.14%)</title><rect x="1.1220%" y="405" width="0.1403%" height="15" fill="rgb(225,35,8)" fg:x="8" fg:w="1"/><text x="1.3720%" y="415.50"></text></g><g><title>curl_global_init (1 samples, 0.14%)</title><rect x="1.1220%" y="389" width="0.1403%" height="15" fill="rgb(250,213,24)" fg:x="8" fg:w="1"/><text x="1.3720%" y="399.50"></text></g><g><title>global_init (1 samples, 0.14%)</title><rect x="1.1220%" y="373" width="0.1403%" height="15" fill="rgb(247,123,22)" fg:x="8" fg:w="1"/><text x="1.3720%" y="383.50"></text></g><g><title>ossl_init (1 samples, 0.14%)</title><rect x="1.1220%" y="357" width="0.1403%" height="15" fill="rgb(231,138,38)" fg:x="8" fg:w="1"/><text x="1.3720%" y="367.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 0.14%)</title><rect x="1.1220%" y="341" width="0.1403%" height="15" fill="rgb(231,145,46)" fg:x="8" fg:w="1"/><text x="1.3720%" y="351.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.14%)</title><rect x="1.1220%" y="325" width="0.1403%" height="15" fill="rgb(251,118,11)" fg:x="8" fg:w="1"/><text x="1.3720%" y="335.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.14%)</title><rect x="1.1220%" y="309" width="0.1403%" height="15" fill="rgb(217,147,25)" fg:x="8" fg:w="1"/><text x="1.3720%" y="319.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.14%)</title><rect x="1.1220%" y="293" width="0.1403%" height="15" fill="rgb(247,81,37)" fg:x="8" fg:w="1"/><text x="1.3720%" y="303.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="1.1220%" y="277" width="0.1403%" height="15" fill="rgb(209,12,38)" fg:x="8" fg:w="1"/><text x="1.3720%" y="287.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="1.1220%" y="261" width="0.1403%" height="15" fill="rgb(227,1,9)" fg:x="8" fg:w="1"/><text x="1.3720%" y="271.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.14%)</title><rect x="1.1220%" y="245" width="0.1403%" height="15" fill="rgb(248,47,43)" fg:x="8" fg:w="1"/><text x="1.3720%" y="255.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.14%)</title><rect x="1.1220%" y="229" width="0.1403%" height="15" fill="rgb(221,10,30)" fg:x="8" fg:w="1"/><text x="1.3720%" y="239.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.14%)</title><rect x="1.1220%" y="213" width="0.1403%" height="15" fill="rgb(210,229,1)" fg:x="8" fg:w="1"/><text x="1.3720%" y="223.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="1.1220%" y="197" width="0.1403%" height="15" fill="rgb(222,148,37)" fg:x="8" fg:w="1"/><text x="1.3720%" y="207.50"></text></g><g><title>ERR_clear_error (1 samples, 0.14%)</title><rect x="1.1220%" y="181" width="0.1403%" height="15" fill="rgb(234,67,33)" fg:x="8" fg:w="1"/><text x="1.3720%" y="191.50"></text></g><g><title>ERR_get_state (1 samples, 0.14%)</title><rect x="1.1220%" y="165" width="0.1403%" height="15" fill="rgb(247,98,35)" fg:x="8" fg:w="1"/><text x="1.3720%" y="175.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.14%)</title><rect x="1.1220%" y="149" width="0.1403%" height="15" fill="rgb(247,138,52)" fg:x="8" fg:w="1"/><text x="1.3720%" y="159.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.14%)</title><rect x="1.1220%" y="133" width="0.1403%" height="15" fill="rgb(213,79,30)" fg:x="8" fg:w="1"/><text x="1.3720%" y="143.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.14%)</title><rect x="1.1220%" y="117" width="0.1403%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="1"/><text x="1.3720%" y="127.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="1.1220%" y="101" width="0.1403%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="1"/><text x="1.3720%" y="111.50"></text></g><g><title>[libcrypto.so.1.1] (1 samples, 0.14%)</title><rect x="1.1220%" y="85" width="0.1403%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="1"/><text x="1.3720%" y="95.50"></text></g><g><title>ERR_load_CT_strings (1 samples, 0.14%)</title><rect x="1.1220%" y="69" width="0.1403%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="1.3720%" y="79.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.14%)</title><rect x="1.1220%" y="53" width="0.1403%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="1"/><text x="1.3720%" y="63.50"></text></g><g><title>ERR_load_ERR_strings (1 samples, 0.14%)</title><rect x="1.1220%" y="37" width="0.1403%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="1"/><text x="1.3720%" y="47.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as core::ops::arith::Div&lt;T&gt;&gt;::div (1 samples, 0.14%)</title><rect x="1.2623%" y="437" width="0.1403%" height="15" fill="rgb(233,84,52)" fg:x="9" fg:w="1"/><text x="1.5123%" y="447.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (1 samples, 0.14%)</title><rect x="1.4025%" y="437" width="0.1403%" height="15" fill="rgb(207,117,47)" fg:x="10" fg:w="1"/><text x="1.6525%" y="447.50"></text></g><g><title>[libc-2.31.so] (1 samples, 0.14%)</title><rect x="1.4025%" y="421" width="0.1403%" height="15" fill="rgb(249,43,39)" fg:x="10" fg:w="1"/><text x="1.6525%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.14%)</title><rect x="1.5428%" y="405" width="0.1403%" height="15" fill="rgb(209,38,44)" fg:x="11" fg:w="1"/><text x="1.7928%" y="415.50"></text></g><g><title>model_lib::ctx::array_alloc::ArrayAlloc::to_slice (1 samples, 0.14%)</title><rect x="1.6830%" y="405" width="0.1403%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="1"/><text x="1.9330%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.14%)</title><rect x="1.6830%" y="389" width="0.1403%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="1.9330%" y="399.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::iter::traits::collect::IntoIterator for ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::into_iter (1 samples, 0.14%)</title><rect x="1.8233%" y="405" width="0.1403%" height="15" fill="rgb(211,96,35)" fg:x="13" fg:w="1"/><text x="2.0733%" y="415.50"></text></g><g><title>ndarray::impl_views::conversions::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::into_iter_ (1 samples, 0.14%)</title><rect x="1.8233%" y="389" width="0.1403%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="1"/><text x="2.0733%" y="399.50"></text></g><g><title>ndarray::iterators::Iter&lt;A,D&gt;::new (1 samples, 0.14%)</title><rect x="1.8233%" y="373" width="0.1403%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="1"/><text x="2.0733%" y="383.50"></text></g><g><title>ndarray::impl_views::conversions::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::to_slice (1 samples, 0.14%)</title><rect x="1.8233%" y="357" width="0.1403%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="1"/><text x="2.0733%" y="367.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::is_standard_layout (1 samples, 0.14%)</title><rect x="1.8233%" y="341" width="0.1403%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="1"/><text x="2.0733%" y="351.50"></text></g><g><title>ndarray::dimension::is_layout_c (1 samples, 0.14%)</title><rect x="1.8233%" y="325" width="0.1403%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="2.0733%" y="335.50"></text></g><g><title>&lt;model_lib::ctx::array_alloc::ArrayId&lt;T,D1&gt; as model_lib::ctx::id_algebra::BroadCastIter&lt;T,D2&gt;&gt;::broadcast (4 samples, 0.56%)</title><rect x="1.5428%" y="421" width="0.5610%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="4"/><text x="1.7928%" y="431.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast (1 samples, 0.14%)</title><rect x="1.9635%" y="405" width="0.1403%" height="15" fill="rgb(240,68,47)" fg:x="14" fg:w="1"/><text x="2.2135%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast::upcast (1 samples, 0.14%)</title><rect x="1.9635%" y="389" width="0.1403%" height="15" fill="rgb(210,16,53)" fg:x="14" fg:w="1"/><text x="2.2135%" y="399.50"></text></g><g><title>model_lib::ctx::array_alloc::ArrayAlloc::to_slice (2 samples, 0.28%)</title><rect x="2.1038%" y="389" width="0.2805%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="2"/><text x="2.3538%" y="399.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::from_shape (2 samples, 0.28%)</title><rect x="2.1038%" y="373" width="0.2805%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="2"/><text x="2.3538%" y="383.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::from_shape_impl (2 samples, 0.28%)</title><rect x="2.1038%" y="357" width="0.2805%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="2"/><text x="2.3538%" y="367.50"></text></g><g><title>&lt;model_lib::ctx::array_alloc::ArrayId&lt;T,D1&gt; as model_lib::ctx::id_algebra::BroadCastIter&lt;T,D2&gt;&gt;::broadcast (3 samples, 0.42%)</title><rect x="2.1038%" y="405" width="0.4208%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="3"/><text x="2.3538%" y="415.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast (1 samples, 0.14%)</title><rect x="2.3843%" y="389" width="0.1403%" height="15" fill="rgb(230,116,27)" fg:x="17" fg:w="1"/><text x="2.6343%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast::upcast (1 samples, 0.14%)</title><rect x="2.3843%" y="373" width="0.1403%" height="15" fill="rgb(228,99,48)" fg:x="17" fg:w="1"/><text x="2.6343%" y="383.50"></text></g><g><title>&lt;ndarray::dimension::dim::Dim&lt;I&gt; as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="2.3843%" y="357" width="0.1403%" height="15" fill="rgb(253,11,6)" fg:x="17" fg:w="1"/><text x="2.6343%" y="367.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (1 samples, 0.14%)</title><rect x="2.3843%" y="341" width="0.1403%" height="15" fill="rgb(247,143,39)" fg:x="17" fg:w="1"/><text x="2.6343%" y="351.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (1 samples, 0.14%)</title><rect x="2.3843%" y="325" width="0.1403%" height="15" fill="rgb(236,97,10)" fg:x="17" fg:w="1"/><text x="2.6343%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (2 samples, 0.28%)</title><rect x="2.5245%" y="373" width="0.2805%" height="15" fill="rgb(233,208,19)" fg:x="18" fg:w="2"/><text x="2.7745%" y="383.50"></text></g><g><title>model_lib::ctx::array_alloc::ArrayAlloc::to_slice (2 samples, 0.28%)</title><rect x="2.8050%" y="373" width="0.2805%" height="15" fill="rgb(216,164,2)" fg:x="20" fg:w="2"/><text x="3.0550%" y="383.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::from_shape (2 samples, 0.28%)</title><rect x="2.8050%" y="357" width="0.2805%" height="15" fill="rgb(220,129,5)" fg:x="20" fg:w="2"/><text x="3.0550%" y="367.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::from_shape_impl (2 samples, 0.28%)</title><rect x="2.8050%" y="341" width="0.2805%" height="15" fill="rgb(242,17,10)" fg:x="20" fg:w="2"/><text x="3.0550%" y="351.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr (1 samples, 0.14%)</title><rect x="2.9453%" y="325" width="0.1403%" height="15" fill="rgb(242,107,0)" fg:x="21" fg:w="1"/><text x="3.1953%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.14%)</title><rect x="2.9453%" y="309" width="0.1403%" height="15" fill="rgb(251,28,31)" fg:x="21" fg:w="1"/><text x="3.1953%" y="319.50"></text></g><g><title>ndarray::dimension::offset_from_low_addr_ptr_to_logical_ptr::{{closure}} (1 samples, 0.14%)</title><rect x="2.9453%" y="293" width="0.1403%" height="15" fill="rgb(233,223,10)" fg:x="21" fg:w="1"/><text x="3.1953%" y="303.50"></text></g><g><title>ndarray::arraytraits::&lt;impl core::iter::traits::collect::IntoIterator for ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::into_iter (1 samples, 0.14%)</title><rect x="3.0856%" y="373" width="0.1403%" height="15" fill="rgb(215,21,27)" fg:x="22" fg:w="1"/><text x="3.3356%" y="383.50"></text></g><g><title>ndarray::impl_views::conversions::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;A&gt;,D&gt;&gt;::into_iter_ (1 samples, 0.14%)</title><rect x="3.0856%" y="357" width="0.1403%" height="15" fill="rgb(232,23,21)" fg:x="22" fg:w="1"/><text x="3.3356%" y="367.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::BroadCastIter&lt;TC,&lt;D2 as ndarray::dimension::broadcast::DimMax&lt;D1&gt;&gt;::Output&gt;&gt;::broadcast (9 samples, 1.26%)</title><rect x="2.1038%" y="421" width="1.2623%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="9"/><text x="2.3538%" y="431.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::BroadCastIter&lt;TC,&lt;D2 as ndarray::dimension::broadcast::DimMax&lt;D1&gt;&gt;::Output&gt;&gt;::broadcast (6 samples, 0.84%)</title><rect x="2.5245%" y="405" width="0.8415%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="6"/><text x="2.7745%" y="415.50"></text></g><g><title>&lt;model_lib::ctx::array_alloc::ArrayId&lt;T,D1&gt; as model_lib::ctx::id_algebra::BroadCastIter&lt;T,D2&gt;&gt;::broadcast (6 samples, 0.84%)</title><rect x="2.5245%" y="389" width="0.8415%" height="15" fill="rgb(247,70,30)" fg:x="18" fg:w="6"/><text x="2.7745%" y="399.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast (1 samples, 0.14%)</title><rect x="3.2258%" y="373" width="0.1403%" height="15" fill="rgb(212,68,19)" fg:x="23" fg:w="1"/><text x="3.4758%" y="383.50"></text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::broadcast::upcast (1 samples, 0.14%)</title><rect x="3.2258%" y="357" width="0.1403%" height="15" fill="rgb(240,187,13)" fg:x="23" fg:w="1"/><text x="3.4758%" y="367.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::Exec&gt;::outdim (1 samples, 0.14%)</title><rect x="3.3661%" y="421" width="0.1403%" height="15" fill="rgb(223,113,26)" fg:x="24" fg:w="1"/><text x="3.6161%" y="431.50"></text></g><g><title>model_lib::ctx::id_algebra::broadcast (1 samples, 0.14%)</title><rect x="3.3661%" y="405" width="0.1403%" height="15" fill="rgb(206,192,2)" fg:x="24" fg:w="1"/><text x="3.6161%" y="415.50"></text></g><g><title>model_lib::ctx::id_algebra::co_broadcast (1 samples, 0.14%)</title><rect x="3.3661%" y="389" width="0.1403%" height="15" fill="rgb(241,108,4)" fg:x="24" fg:w="1"/><text x="3.6161%" y="399.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExecIter&lt;It1,It2,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (152 samples, 21.32%)</title><rect x="8.2749%" y="325" width="21.3184%" height="15" fill="rgb(247,173,49)" fg:x="59" fg:w="152"/><text x="8.5249%" y="335.50">&lt;model_lib::ctx::id_algebra::BinEx..</text></g><g><title>&lt;model_lib::ctx::id_algebra::OwnedIter&lt;It&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 21.04%)</title><rect x="8.5554%" y="309" width="21.0379%" height="15" fill="rgb(224,114,35)" fg:x="61" fg:w="150"/><text x="8.8054%" y="319.50">&lt;model_lib::ctx::id_algebra::Owne..</text></g><g><title>&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 21.04%)</title><rect x="8.5554%" y="293" width="21.0379%" height="15" fill="rgb(245,159,27)" fg:x="61" fg:w="150"/><text x="8.8054%" y="303.50">&lt;ndarray::iterators::Iter&lt;A,D&gt; as..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (97 samples, 13.60%)</title><rect x="15.9888%" y="277" width="13.6045%" height="15" fill="rgb(245,172,44)" fg:x="114" fg:w="97"/><text x="16.2388%" y="287.50">&lt;core::slice::iter::I..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (97 samples, 13.60%)</title><rect x="15.9888%" y="261" width="13.6045%" height="15" fill="rgb(236,23,11)" fg:x="114" fg:w="97"/><text x="16.2388%" y="271.50">core::slice::iter::It..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (97 samples, 13.60%)</title><rect x="15.9888%" y="245" width="13.6045%" height="15" fill="rgb(205,117,38)" fg:x="114" fg:w="97"/><text x="16.2388%" y="255.50">core::ptr::mut_ptr::&lt;..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (97 samples, 13.60%)</title><rect x="15.9888%" y="229" width="13.6045%" height="15" fill="rgb(237,72,25)" fg:x="114" fg:w="97"/><text x="16.2388%" y="239.50">core::ptr::mut_ptr::&lt;..</text></g><g><title>&lt;model_lib::ctx::id_algebra::DivF as model_lib::ctx::id_algebra::BinFn&lt;A&gt;&gt;::apply (236 samples, 33.10%)</title><rect x="29.5933%" y="325" width="33.0996%" height="15" fill="rgb(244,70,9)" fg:x="211" fg:w="236"/><text x="29.8433%" y="335.50">&lt;model_lib::ctx::id_algebra::DivF as model_lib::ctx::i..</text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (236 samples, 33.10%)</title><rect x="29.5933%" y="309" width="33.0996%" height="15" fill="rgb(217,125,39)" fg:x="211" fg:w="236"/><text x="29.8433%" y="319.50">&lt;f32 as core::ops::arith::Div&gt;::div</text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="293" width="0.1403%" height="15" fill="rgb(235,36,10)" fg:x="446" fg:w="1"/><text x="62.8026%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="277" width="0.1403%" height="15" fill="rgb(251,123,47)" fg:x="446" fg:w="1"/><text x="62.8026%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="261" width="0.1403%" height="15" fill="rgb(221,13,13)" fg:x="446" fg:w="1"/><text x="62.8026%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="245" width="0.1403%" height="15" fill="rgb(238,131,9)" fg:x="446" fg:w="1"/><text x="62.8026%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="229" width="0.1403%" height="15" fill="rgb(211,50,8)" fg:x="446" fg:w="1"/><text x="62.8026%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="213" width="0.1403%" height="15" fill="rgb(245,182,24)" fg:x="446" fg:w="1"/><text x="62.8026%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="197" width="0.1403%" height="15" fill="rgb(242,14,37)" fg:x="446" fg:w="1"/><text x="62.8026%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="181" width="0.1403%" height="15" fill="rgb(246,228,12)" fg:x="446" fg:w="1"/><text x="62.8026%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="165" width="0.1403%" height="15" fill="rgb(213,55,15)" fg:x="446" fg:w="1"/><text x="62.8026%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="149" width="0.1403%" height="15" fill="rgb(209,9,3)" fg:x="446" fg:w="1"/><text x="62.8026%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="133" width="0.1403%" height="15" fill="rgb(230,59,30)" fg:x="446" fg:w="1"/><text x="62.8026%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="117" width="0.1403%" height="15" fill="rgb(209,121,21)" fg:x="446" fg:w="1"/><text x="62.8026%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="101" width="0.1403%" height="15" fill="rgb(220,109,13)" fg:x="446" fg:w="1"/><text x="62.8026%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="85" width="0.1403%" height="15" fill="rgb(232,18,1)" fg:x="446" fg:w="1"/><text x="62.8026%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="62.5526%" y="69" width="0.1403%" height="15" fill="rgb(215,41,42)" fg:x="446" fg:w="1"/><text x="62.8026%" y="79.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::OwnedIter&lt;It&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 7.15%)</title><rect x="62.6928%" y="325" width="7.1529%" height="15" fill="rgb(224,123,36)" fg:x="447" fg:w="51"/><text x="62.9428%" y="335.50">&lt;model_lib..</text></g><g><title>&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 7.15%)</title><rect x="62.6928%" y="309" width="7.1529%" height="15" fill="rgb(240,125,3)" fg:x="447" fg:w="51"/><text x="62.9428%" y="319.50">&lt;ndarray::..</text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExecIter&lt;It1,It2,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (495 samples, 69.42%)</title><rect x="8.2749%" y="357" width="69.4250%" height="15" fill="rgb(205,98,50)" fg:x="59" fg:w="495"/><text x="8.5249%" y="367.50">&lt;model_lib::ctx::id_algebra::BinExecIter&lt;It1,It2,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExecIter&lt;It1,It2,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (495 samples, 69.42%)</title><rect x="8.2749%" y="341" width="69.4250%" height="15" fill="rgb(205,185,37)" fg:x="59" fg:w="495"/><text x="8.5249%" y="351.50">&lt;model_lib::ctx::id_algebra::BinExecIter&lt;It1,It2,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::is_some (56 samples, 7.85%)</title><rect x="69.8457%" y="325" width="7.8541%" height="15" fill="rgb(238,207,15)" fg:x="498" fg:w="56"/><text x="70.0957%" y="335.50">core::optio..</text></g><g><title>[unknown] (6 samples, 0.84%)</title><rect x="76.8583%" y="309" width="0.8415%" height="15" fill="rgb(213,199,42)" fg:x="548" fg:w="6"/><text x="77.1083%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (583 samples, 81.77%)</title><rect x="3.5063%" y="389" width="81.7672%" height="15" fill="rgb(235,201,11)" fg:x="25" fg:w="583"/><text x="3.7563%" y="399.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (583 samples, 81.77%)</title><rect x="3.5063%" y="373" width="81.7672%" height="15" fill="rgb(207,46,11)" fg:x="25" fg:w="583"/><text x="3.7563%" y="383.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next</text></g><g><title>&lt;ndarray::iterators::IterMut&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 7.57%)</title><rect x="77.6999%" y="357" width="7.5736%" height="15" fill="rgb(241,35,35)" fg:x="554" fg:w="54"/><text x="77.9499%" y="367.50">&lt;ndarray::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (665 samples, 93.27%)</title><rect x="3.5063%" y="421" width="93.2679%" height="15" fill="rgb(243,32,47)" fg:x="25" fg:w="665"/><text x="3.7563%" y="431.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (665 samples, 93.27%)</title><rect x="3.5063%" y="405" width="93.2679%" height="15" fill="rgb(247,202,23)" fg:x="25" fg:w="665"/><text x="3.7563%" y="415.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (82 samples, 11.50%)</title><rect x="85.2735%" y="389" width="11.5007%" height="15" fill="rgb(219,102,11)" fg:x="608" fg:w="82"/><text x="85.5235%" y="399.50">core::iter::trait..</text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::Exec&gt;::exec::{{closure}} (82 samples, 11.50%)</title><rect x="85.2735%" y="373" width="11.5007%" height="15" fill="rgb(243,110,44)" fg:x="608" fg:w="82"/><text x="85.5235%" y="383.50">&lt;model_lib::ctx::..</text></g><g><title>[unknown] (2 samples, 0.28%)</title><rect x="96.4937%" y="357" width="0.2805%" height="15" fill="rgb(222,74,54)" fg:x="688" fg:w="2"/><text x="96.7437%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="341" width="0.1403%" height="15" fill="rgb(216,99,12)" fg:x="689" fg:w="1"/><text x="96.8839%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="325" width="0.1403%" height="15" fill="rgb(226,22,26)" fg:x="689" fg:w="1"/><text x="96.8839%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="309" width="0.1403%" height="15" fill="rgb(217,163,10)" fg:x="689" fg:w="1"/><text x="96.8839%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="293" width="0.1403%" height="15" fill="rgb(213,25,53)" fg:x="689" fg:w="1"/><text x="96.8839%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="277" width="0.1403%" height="15" fill="rgb(252,105,26)" fg:x="689" fg:w="1"/><text x="96.8839%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="261" width="0.1403%" height="15" fill="rgb(220,39,43)" fg:x="689" fg:w="1"/><text x="96.8839%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="245" width="0.1403%" height="15" fill="rgb(229,68,48)" fg:x="689" fg:w="1"/><text x="96.8839%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="229" width="0.1403%" height="15" fill="rgb(252,8,32)" fg:x="689" fg:w="1"/><text x="96.8839%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="213" width="0.1403%" height="15" fill="rgb(223,20,43)" fg:x="689" fg:w="1"/><text x="96.8839%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.14%)</title><rect x="96.6339%" y="197" width="0.1403%" height="15" fill="rgb(229,81,49)" fg:x="689" fg:w="1"/><text x="96.8839%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.14%)</title><rect x="96.7742%" y="389" width="0.1403%" height="15" fill="rgb(236,28,36)" fg:x="690" fg:w="1"/><text x="97.0242%" y="399.50"></text></g><g><title>&lt;ndarray::shape_builder::StrideShape&lt;D&gt; as core::convert::From&lt;T&gt;&gt;::from (1 samples, 0.14%)</title><rect x="96.7742%" y="373" width="0.1403%" height="15" fill="rgb(249,185,26)" fg:x="690" fg:w="1"/><text x="97.0242%" y="383.50"></text></g><g><title>&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::Exec&gt;::exec (682 samples, 95.65%)</title><rect x="1.5428%" y="437" width="95.6522%" height="15" fill="rgb(249,174,33)" fg:x="11" fg:w="682"/><text x="1.7928%" y="447.50">&lt;model_lib::ctx::id_algebra::BinExec&lt;A,B,F&gt; as model_lib::ctx::id_algebra::Exec&gt;::exec</text></g><g><title>model_lib::ctx::array_alloc::ArrayAlloc::request (3 samples, 0.42%)</title><rect x="96.7742%" y="421" width="0.4208%" height="15" fill="rgb(233,201,37)" fg:x="690" fg:w="3"/><text x="97.0242%" y="431.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;mut A&gt;,D&gt;&gt;::from_shape (3 samples, 0.42%)</title><rect x="96.7742%" y="405" width="0.4208%" height="15" fill="rgb(221,78,26)" fg:x="690" fg:w="3"/><text x="97.0242%" y="415.50"></text></g><g><title>ndarray::impl_views::constructors::&lt;impl ndarray::ArrayBase&lt;ndarray::ViewRepr&lt;&amp;mut A&gt;,D&gt;&gt;::from_shape_impl (2 samples, 0.28%)</title><rect x="96.9144%" y="389" width="0.2805%" height="15" fill="rgb(250,127,30)" fg:x="691" fg:w="2"/><text x="97.1644%" y="399.50"></text></g><g><title>ndarray::dimension::can_index_slice_with_strides (2 samples, 0.28%)</title><rect x="96.9144%" y="373" width="0.2805%" height="15" fill="rgb(230,49,44)" fg:x="691" fg:w="2"/><text x="97.1644%" y="383.50"></text></g><g><title>ndarray::dimension::can_index_slice_not_custom (2 samples, 0.28%)</title><rect x="96.9144%" y="357" width="0.2805%" height="15" fill="rgb(229,67,23)" fg:x="691" fg:w="2"/><text x="97.1644%" y="367.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked (2 samples, 0.28%)</title><rect x="96.9144%" y="341" width="0.2805%" height="15" fill="rgb(249,83,47)" fg:x="691" fg:w="2"/><text x="97.1644%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.28%)</title><rect x="96.9144%" y="325" width="0.2805%" height="15" fill="rgb(215,43,3)" fg:x="691" fg:w="2"/><text x="97.1644%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.28%)</title><rect x="96.9144%" y="309" width="0.2805%" height="15" fill="rgb(238,154,13)" fg:x="691" fg:w="2"/><text x="97.1644%" y="319.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::{{closure}} (2 samples, 0.28%)</title><rect x="96.9144%" y="293" width="0.2805%" height="15" fill="rgb(219,56,2)" fg:x="691" fg:w="2"/><text x="97.1644%" y="303.50"></text></g><g><title>ndarray::dimension::size_of_shape_checked::{{closure}} (2 samples, 0.28%)</title><rect x="96.9144%" y="277" width="0.2805%" height="15" fill="rgb(233,0,4)" fg:x="691" fg:w="2"/><text x="97.1644%" y="287.50"></text></g><g><title>[libc-2.31.so] (3 samples, 0.42%)</title><rect x="97.1950%" y="437" width="0.4208%" height="15" fill="rgb(235,30,7)" fg:x="693" fg:w="3"/><text x="97.4450%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.14%)</title><rect x="97.6157%" y="437" width="0.1403%" height="15" fill="rgb(250,79,13)" fg:x="696" fg:w="1"/><text x="97.8657%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.14%)</title><rect x="97.6157%" y="421" width="0.1403%" height="15" fill="rgb(211,146,34)" fg:x="696" fg:w="1"/><text x="97.8657%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.14%)</title><rect x="97.6157%" y="405" width="0.1403%" height="15" fill="rgb(228,22,38)" fg:x="696" fg:w="1"/><text x="97.8657%" y="415.50"></text></g><g><title>all (713 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="713"/><text x="0.2500%" y="575.50"></text></g><g><title>temp (707 samples, 99.16%)</title><rect x="0.8415%" y="549" width="99.1585%" height="15" fill="rgb(221,155,16)" fg:x="6" fg:w="707"/><text x="1.0915%" y="559.50">temp</text></g><g><title>_start (706 samples, 99.02%)</title><rect x="0.9818%" y="533" width="99.0182%" height="15" fill="rgb(215,215,53)" fg:x="7" fg:w="706"/><text x="1.2318%" y="543.50">_start</text></g><g><title>__libc_start_main (706 samples, 99.02%)</title><rect x="0.9818%" y="517" width="99.0182%" height="15" fill="rgb(223,4,10)" fg:x="7" fg:w="706"/><text x="1.2318%" y="527.50">__libc_start_main</text></g><g><title>main (704 samples, 98.74%)</title><rect x="1.2623%" y="501" width="98.7377%" height="15" fill="rgb(234,103,6)" fg:x="9" fg:w="704"/><text x="1.5123%" y="511.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (704 samples, 98.74%)</title><rect x="1.2623%" y="485" width="98.7377%" height="15" fill="rgb(227,97,0)" fg:x="9" fg:w="704"/><text x="1.5123%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (704 samples, 98.74%)</title><rect x="1.2623%" y="469" width="98.7377%" height="15" fill="rgb(234,150,53)" fg:x="9" fg:w="704"/><text x="1.5123%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>temp::main (704 samples, 98.74%)</title><rect x="1.2623%" y="453" width="98.7377%" height="15" fill="rgb(228,201,54)" fg:x="9" fg:w="704"/><text x="1.5123%" y="463.50">temp::main</text></g><g><title>ndarray::impl_ops::assign_ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add_assign (16 samples, 2.24%)</title><rect x="97.7560%" y="437" width="2.2440%" height="15" fill="rgb(222,22,37)" fg:x="697" fg:w="16"/><text x="98.0060%" y="447.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with (16 samples, 2.24%)</title><rect x="97.7560%" y="421" width="2.2440%" height="15" fill="rgb(237,53,32)" fg:x="697" fg:w="16"/><text x="98.0060%" y="431.50">n..</text></g><g><title>ndarray::impl_methods::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zip_mut_with_same_shape (16 samples, 2.24%)</title><rect x="97.7560%" y="405" width="2.2440%" height="15" fill="rgb(233,25,53)" fg:x="697" fg:w="16"/><text x="98.0060%" y="415.50">n..</text></g><g><title>ndarray::impl_ops::assign_ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;ndarray::ArrayBase&lt;S2,E&gt;&gt; for ndarray::ArrayBase&lt;S,D&gt;&gt;::add_assign::{{closure}} (13 samples, 1.82%)</title><rect x="98.1767%" y="389" width="1.8233%" height="15" fill="rgb(210,40,34)" fg:x="700" fg:w="13"/><text x="98.4267%" y="399.50">n..</text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (13 samples, 1.82%)</title><rect x="98.1767%" y="373" width="1.8233%" height="15" fill="rgb(241,220,44)" fg:x="700" fg:w="13"/><text x="98.4267%" y="383.50">&lt;..</text></g></svg></svg>